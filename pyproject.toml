[project]
name = "bookshelf"
version = "0.3.1b3"
description = "A collection of curated climate data sets"
readme = "README.md"
authors = [
    { name = "Jared Lewis", email = "jared.lewis@climate-resource.com" }
]
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 4 - Beta",
    "License :: OSI Approved :: MIT License",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Intended Audience :: Science/Research",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering",
]
dependencies = [
    "scmdata>=0.16.1",
    "pooch",
    "pydantic<2",
    "appdirs",
    "datapackage>=1.15.2",
    "pyyaml",
]

[tool.uv]
dev-dependencies = [
    "pytest>=7.3.1",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.11.1",
    "pytest-xdist>=3.3.1",
    "requests-mock>=1.11.0",
    "mypy>=1.2.0",
    "ruff>=0.1.8",
    "pre-commit>=3.3.1",
    "towncrier>=23.6.0",
    "liccheck>=0.9.1",
    # Stubs
    "types-pyyaml>=6.0.12.20240917",
    "boto3-stubs[essential]>=1.35.39",
    "types-requests>=2.32.0.20240914",
    "pandas-stubs>=2.2.3.241009",
    "types-appdirs>=1.4.3.5",
    # Docs
    "mkdocs>=1.6.0",
    "mkdocstrings[python]>=0.25.0",
    "mkdocs-material>=9.5.0",
    "mkdocs-gen-files>=0.5.0",
    "mkdocs-section-index>=0.3.9",
    "mkdocs-literate-nav>=0.6.1",
    "mkdocs-autorefs>=1.0.1",
    "mkdocs-jupyter>=0.24.0",
    "myst-nb>=1.1.1",
    "jupyterlab>=4.2.0",
    "jupytext>=1.16.3",
    "matplotlib>=3.9.2",
]

[tool.uv.workspace]
members = ["packages/*"]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.sdist]
exclude = [
    "packages"
]

[tool.coverage.run]
source = ["src", "packages"]
branch = true

[tool.coverage.report]
fail_under = 90
skip_empty = true
show_missing = true
# Regexes for lines to exclude from consideration in addition to the defaults
exclude_also = [
    # Don't complain about missing type checking code:
    "if TYPE_CHECKING",
]

[tool.mypy]
strict = true
# prevent unimported libraries silently being treated as Any
#disallow_any_unimported = true
# show error codes on failure with context
show_error_codes = true
show_error_context = true
# warn if code can't be reached
warn_unreachable = true
# importing following uses default settings
follow_imports = "normal"
exclude = [
    "build",
    "dist",
    "notebooks",
    "scripts",
    "stubs",
    "tests",
]

[[tool.mypy.overrides]]
module = [
    "scmdata",
    "pooch",
    "jupytext",
    "papermill",
    "click_log",
    "datapackage"
]
ignore_missing_imports = true


[tool.jupytext]
formats = "ipynb,py:percent"

[tool.pytest.ini_options]
addopts = [
    "--import-mode=importlib",
]

[tool.ruff]
src = ["src"]
target-version = "py39"
select = [
    "E",  # pycodestyle error
    "W",  # pycodestyle warning
    "F",  # pyflakes
    "I",  # isort
    "D",  # pydocstyle
    "PL",  # pylint
    "TRY",  # tryceratops
    "NPY",  # numpy rules
    "RUF",  # ruff specifics
    "UP",  # pyupgrade
    # pandas support via pandas-vet. In some cases we will want to disable
    # this because it can lead to too many false positives.
    "PD",
]
unfixable = [
    "PD002",  # Disable autofix for inplace as this often introduces bugs
]
ignore = [
    "D105",  # Missing docstring in magic method
    "D200",  # One-line docstring should fit on one line with quotes
    "D400",  # First line should end with a period
    "TRY003",  # Avoid specifying long messages outside the exception class
]
line-length = 110

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.per-file-ignores]
"test*.py" = [
    "D",  # Documentation not needed in tests
    "S101",  # S101 Use of `assert` detected
    "PLR2004" # Magic value used in comparison
]
"conftest.py" = [
    "D",  # Documentation not needed in tests
    "S101",  # S101 Use of `assert` detected
    "PLR2004" # Magic value used in comparison
]
"docs/*" = [
    "D100",  # Missing docstring at the top of file
    "E402",  # Module level import not at top of file
    "S101",  # Use of `assert` detected
]
"notebooks/*" = [
    "D100",  # Missing docstring at the top of file
    "D103",  # Missing docstring in public function
    "E402",  # Module level import not at top of file
    "S101",  # Use of `assert` detected
    "PD901",  # `df` is a bad variable name.
]
"scripts/*" = [
    "S101" # S101 Use of `assert` detected
]

[tool.ruff.isort]
known-first-party = ["bookshelf", "bookshelf_producer"]

[tool.ruff.pydocstyle]
convention = "numpy"

[tool.towncrier]
package = "bookshelf"
package_dir = "src"
filename = "docs/changelog.md"
directory = "changelog/"
title_format = "## bookshelf {version} ({project_date})"
underlines = ["", "", ""]
issue_format = "[#{issue}](https://github.com/climate-resource/bookshelf/pull/{issue})"

  [[tool.towncrier.type]]
  directory = "breaking"
  name = "Breaking Changes"
  showcontent = true

  [[tool.towncrier.type]]
  directory = "deprecation"
  name = "Deprecations"
  showcontent = true

  [[tool.towncrier.type]]
  directory = "feature"
  name = "Features"
  showcontent = true

  [[tool.towncrier.type]]
  directory = "improvement"
  name = "Improvements"
  showcontent = true

  [[tool.towncrier.type]]
  directory = "fix"
  name = "Bug Fixes"
  showcontent = true

  [[tool.towncrier.type]]
  directory = "docs"
  name = "Improved Documentation"
  showcontent = true

  [[tool.towncrier.type]]
  directory = "trivial"
  name = "Trivial/Internal Changes"
  showcontent = false

[tool.liccheck]
authorized_licenses = [
    "bsd",
    "bsd license",
    "BSD 3-Clause",
    "CC0",
    "apache",
    "apache 2.0",
    "apache software",
    "apache software license",
    "Apache License, Version 2.0",
    "Historical Permission Notice and Disclaimer (HPND)",
    "isc license",
    "isc license (iscl)",
    "gnu lgpl",
    "lgpl with exceptions or zpl",
    "LGPLv2+",
    "GNU Lesser General Public License v2 (LGPLv2)",
    "GNU Lesser General Public License v2 or later (LGPLv2+)",
    "mit",
    "mit license",
    "Mozilla Public License 2.0 (MPL 2.0)",
    "python software foundation",
    "python software foundation license",
    "zpl 2.1",
]
# This starting list is relatively conservative. Depending on the project, it
# may make sense to move some of these into the authorized list
unauthorized_licenses = [
    "agpl",
    "gnu agpl",
    "gpl v3",
    "gplv3",
    "gpl v2",
    "gplv2",
    "gpl v1",
    "gplv1",
]
